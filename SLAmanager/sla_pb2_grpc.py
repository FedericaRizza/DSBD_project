# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sla_pb2 as sla__pb2


class SlaServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetSla = channel.unary_unary(
                '/sla.SlaService/SetSla',
                request_serializer=sla__pb2.MetricValue.SerializeToString,
                response_deserializer=sla__pb2.SlaReply.FromString,
                )
        self.SlaStatus = channel.unary_unary(
                '/sla.SlaService/SlaStatus',
                request_serializer=sla__pb2.SlaRequest.SerializeToString,
                response_deserializer=sla__pb2.SlaReply.FromString,
                )
        self.GetViolation = channel.unary_stream(
                '/sla.SlaService/GetViolation',
                request_serializer=sla__pb2.SlaRequest.SerializeToString,
                response_deserializer=sla__pb2.Violation.FromString,
                )
        self.GetFutureViolation = channel.unary_stream(
                '/sla.SlaService/GetFutureViolation',
                request_serializer=sla__pb2.SlaRequest.SerializeToString,
                response_deserializer=sla__pb2.Violation.FromString,
                )


class SlaServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SetSla(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SlaStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetViolation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFutureViolation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SlaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetSla': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSla,
                    request_deserializer=sla__pb2.MetricValue.FromString,
                    response_serializer=sla__pb2.SlaReply.SerializeToString,
            ),
            'SlaStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SlaStatus,
                    request_deserializer=sla__pb2.SlaRequest.FromString,
                    response_serializer=sla__pb2.SlaReply.SerializeToString,
            ),
            'GetViolation': grpc.unary_stream_rpc_method_handler(
                    servicer.GetViolation,
                    request_deserializer=sla__pb2.SlaRequest.FromString,
                    response_serializer=sla__pb2.Violation.SerializeToString,
            ),
            'GetFutureViolation': grpc.unary_stream_rpc_method_handler(
                    servicer.GetFutureViolation,
                    request_deserializer=sla__pb2.SlaRequest.FromString,
                    response_serializer=sla__pb2.Violation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sla.SlaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SlaService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SetSla(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sla.SlaService/SetSla',
            sla__pb2.MetricValue.SerializeToString,
            sla__pb2.SlaReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SlaStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sla.SlaService/SlaStatus',
            sla__pb2.SlaRequest.SerializeToString,
            sla__pb2.SlaReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetViolation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sla.SlaService/GetViolation',
            sla__pb2.SlaRequest.SerializeToString,
            sla__pb2.Violation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetFutureViolation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/sla.SlaService/GetFutureViolation',
            sla__pb2.SlaRequest.SerializeToString,
            sla__pb2.Violation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
